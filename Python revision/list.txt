** -  List is a collection which is ordered and changeable. Allows duplicate members.
- Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
- Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
- Dictionary is a collection which is ordered** and changeable. No duplicate members.


->  def any_func_name(normal_arg, *args, **kwargs)
  - sequence matter 
->  *args:- 
  - single arguments pass in *args like only single value(str, int, float, list,
    tuple, set etc...)  pass in args.
->  **kwargs:-
  - multiple arguments pass in **kwargs, like key,value in dict both pass in
    **kwargs.

->  List items are indexed, the first item has index [0], the second item has index [1]

->  If you add new items to a list, the new items will be placed at the end of the list.

->  print(list1)

->  len(list1)

->  List items can be of any data type  //  str, flote, bool, int etc....

->  type(list1)

->  list1 = list(("apple", "banana", "cherry"))
    - It is also possible to use the list() constructor when creating a new list.

->  list1[4], list1[-3]. list1[0]

->  list1[2:]     //  ending list complete
    list1[:8]     //  starting 0th index
    list1[2:8]    //  8th item not included
    list1[-4:-1]  //  enter negative index
    - You can specify a range of indexes by specifying where to start and where to end the range.
    - When specifying a range, the return value will be a new list with the specified items

->  if "item_name" in list1:    //  check if item exists in list

->  list1[1] = "value"
    - To change the value of a specific item, refer to the index number

->  list1[2:4] = ["value", "value"]
    - Change the values "old_value_1" and "old_value_2" with the values "new_value_1" and "new_value_1"

->  list1[1:2] = ["value", "value"]
    - Change the second value by replacing it with two new values

->  list1[1:3] = ["value"]
    - Change the second and third value by replacing it with one value

->  list1.insert(index_number, "value")

->  list1.append("value")
    - apeend any value, another list, tuple, set, dict etc....

->  list1.extend(list2)
    - To append elements from another list to the current list, use the extend() method
    - The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).

->  list1.remove("value_name")
    - The remove() method removes the specified item

->  l1.pop(5)
    - The pop() method removes the specified index
    l1.pop()
    - If you do not specify the index, the pop() method removes the last item

->  del l1[7]
    - The del keyword also removes the specified index.
    del l1
    - The del keyword can also delete the list completely.

->  l1.clear()
    - The clear() method empties the list.
    - The list still remains, but it has no content.

->  for i in l1:    //  You can loop through the list items by using a for loop

->  for i in range(len(l1)):  
    - You can also loop through the list items by referring to their index number.
    - Use the range() and len() functions to create a suitable iterable.

->  while i < len(l1):
      print(l1[i])
      i = i + 1
    - Print all items, using a while loop to go through all the index numbers

->  [print(x) for x in l1]
    - List Comprehension offers the shortest syntax for looping through lists.

->  List Comprehension
    for x in fruits:
      if "a" in x:
        newlist.append(x)
            OR
    newlist = [x for x in fruits if "a" in x]
    - both are same

->  newlist = [expression for item in iterable if condition == True]
    - newlist = [x for x in fruits if x != "apple"]

->  newlist = [x for x in fruits]
->  newlist = [x for x in range(10)]
->  newlist = [x for x in range(10) if x < 5]
->  newlist = [x.upper() for x in fruits]
->  newlist = ['hello' for x in fruits]
->  newlist = [x if x != "banana" else "orange" for x in fruits]

->  l1.sort()
    - List objects have a sort() method that will sort the list alphanumerically,  ascending, by default
->  l1.sort(reverse=True)
    - To sort descending, use the keyword argument reverse = True

->  l1.reverse()
    - just only list reverse not to set any order.

->  l1.sort(key = str.lower)
    - 1st lower alphabat set ascending than capital alphabat arrange ascending

->  t = l1.copy()
    - Make a copy of a list with the copy() method.

->  t = list(l1)
    - Make a copy of a list with the list() method

->  l1 + l2   //  join list
    - One of the easiest ways are by using the + operator.

->  for x in list2:
      list1.append(x)
    - join list another method

->  l1.extend(l2)
    - join two list

->  l1.count("value")
    - how many time reapeat this value in this list?

->  l1.index("value")
    - any write value in list show index number of this perticular value.
    - multiple time value reapeate that time 1st positions index match that value.