# Serialization 

	- Complex Datatype -> Python Native Datatype -> Json data
	- get info. from database ->  convert in Python type -> then   last convert Json data
	- model -> Serialization -> Json

# DeSerialization 

	- Json data -> Python Native Datatype -> Complex Datatype
	- get Json data  ->  convert in Python type -> post data in    database
	- Json -> DeSerialization -> model

- jsond data -> stream using io.BytesIO -> python_data using
- JSONParser -> python_data convert Complex_data using serialization

Insert Data

# Validation

	priority Level:-
	1. Validators
	2. Field Level Validation
	3. Object Level Validation

# Model_Serializer

	- 1. name = serializers.CharField(read_only = True)
	- 2. read_only_field = ['name', 'roll']    // both mean are same
	- 3. extra_kwargs = {'name':{'read_only':True}}
	- this field only read not midified

	- Add Validation (Normally add)
	 - check serializer.py (R4.../Validation)

# Function Based Api View
	- @api_view(['GET', 'POST', 'PUT', 'DELETE'])   //  multiple choice methods write, any function any method write just function above this line.

	- Response(serializer.data)     //  Response data convert json and send client side automatic

	- Student.objects.get(id=id)    // id = 1 check in Student model and compare id is in database? yes then continue

	- serializer = StudentSerialiazer(stu, many=True)   //  Miltiple data get form of queryset that's why many=True write

	- request.data      //      returns the parsed content of the request body
						//      request.data # Handles arbitrary data. Works for 'POST', 'PUT' and 'PATCH' methods.
						//      parsed content means get all data json form

	- save()    //  Data save
	- delete()  //  Data delete

	- PUT = complete update
	- PATCH = partial update    //      some kind of data update

#   Generic Api View
	- GenericApiView - 

	- ListModelMixin - 

	- list(), create(), retrieve(), update(), destroy()
	- get,      post,   get,        put,        delete,

#   Concrete Generic View
	- ListCreateAPIView, RetrieveUpdateDestroyAPIView
		- two useful methods
	- sortest code and create CRUD operation

#   ViewSet
	- create, update, delete, retrieve, list(show) these methods perform
	- DefualtRouter concept
	- router.register()
	- route the root of our views functions without passign urls automatic understanding path without url using Router or ViewSet.

- queryset - store multiple data / store set of data

# ModelViewSet
  - create, update, delete, retrieve, list(show) these methods perform with sortest method

# ReadOnlyModelViewSet
  - only list(show), retrive two methods perform

# Authentication & Permission
- Permission Class : -
  - AllowAny
	 - any user perform crud operations.

  - IsAuthenticated
		- authenticated user perform crud operations.

  - IsAdminUser
		- staff status is active that user only crud opretions.

  - IsAuthenticatedOrReadOnly
		- authenticated user perform crud operations but not authenticated user is 
		only accessiable safe methods.

  - DjangoModelPermissions
		- unauthenticated user nothing anything provide
		- authenticated user by default only read permissions
		- crud operations perform then permission allow in django admin panale
		- Powerful class any permission set in through this class via django admin panale

  - DjangoModelPermissionsOrAnonReadOnly
		- unauthenticated user by default only read permissions 
		- crud operations perform then permission allow in django admin panale
		- Powerful class any permission set in through this class via django admin panale

  - DjangoObjectPermissions
		-

  - Custom Permissions
		- own permission class
		- Third party Permission packages
			- DRF - Access Policy
			- Composed Permission
			- REST Condition
			- DRY Rest permissions
			- Django Rest Framework Roles
			- Django REST Framework API Key
			- Dajngo Rest Framework Role Filters
			- Django Rest Framework PSQ


	Globly Define: - REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES':['rest_framework.authentication.BasicAuthentication'],
    'DEFAULT_PERMISSION_CLASSES':['rest_framework.permissions.IsAuthenticated'],
		}
	
	Locally Define: - authentication_classes = [BasicAuthentication]
    permission_classes = [IsAuthenticated]    // Locally Declare

- Basic Authentication
	- 

- Session Authentication
	- unsafe methods :- 
		- PUT, PATCH, POST, DELETE

	- safe methods :-
		- GET, HEAD, OPTIONS

- Generate Token methods
	- Using Admin Application
	- Using Django manage.py drf_create_token <username> 		// through command
	- By exposing an Api endpoint 		//	user request with username and password
	- Using Signals		//	user created then quick create token



- Token Authentication
	- settings.py in import: 'rest_framework.authtoken'
	- urls.py in add this url: path('gettoken/', obtain_auth_token)
	- urls.py in import: from rest_framework.authtoken.views import obtain_auth_token

- Custom Token Authentication
	- just change about terminal in show not only token number any other details to show in terminal (check auth.py)

- CRUD operations through terminal using token Key
	- GET
		- http http://127.0.0.1:8000/studentapi/ 'Authorization:Token 917eca2a7f35d58cf2c75e09998a0b66dcadeace'

	- POST	
		- http -f POST http://127.0.0.1:8000/studentapi/ name=Jay roll=103 city=surat 'Authorization:Token 917eca2a7f35d58cf2c75e09998a0b66dcadeace'

	- PUT
		- http PUT http://127.0.0.1:8000/studentapi/2/ name=raju roll=104 city=dwarka 'Authorization:Token 917eca2a7f35d58cf2c75e09998a0b66dcadeace'

	- DELETE
		- http DELETE http://127.0.0.1:8000/studentapi/2/ 'Authorization:Token 917eca2a7f35d58cf2c75e09998a0b66dcadeace'

- Access authenticated through urls (R17)

- JWT(JSON Web Token)
	- Token is generated but not store in database (This is 3rd Party Token Authentication packages)

	- opp. Token is generated and store in database (This is in Built in Token Authentication packages)

	- ACCESS_TOKEN_LIFETIME - by default   5 minutes
	- REFRESH_TOKEN_LIFETIME - by default  1 day / 24 hour
	
	- http http://127.0.0.1:8000/studentapi/ 'Authorization:Bearer token_number' // Get Data

	- http -f POST http://127.0.0.1:8000/studentapi/ name=Prince roll=104 city=Gandhinagar 'Authorization:Bearer token_number'	// Insert Data

	- http PUT http://127.0.0.1:8000/studentapi/3/ name=Paras roll=114 city=jamnagar 'Authorization:Bearer token_number'		// Update Data

	- http DELETE http://127.0.0.1:8000/studentapi/3/ name=Paras roll=114 city=jamnagar 'Authorization:Bearer token_number'

- JWT how to declare in globle?
	- SIMPLE_JWT = {
		'ACCESS_TOKEN_LIFETIME':timedelta(minutes=5), 		// default value is 5
		'ROTATE_REFRESH_TOKENS':True		//	value is false then show only access token in terminal 
																		but value is True then show access & refresh Token in Terminal
	}


----------------------------------------------------------------------------------------
- What is Celery?
	- Celery is a simple, flexible, and reliable distributed system to process vast amounts of messages, while 	   providing operations with the tools required to maintain such a system.
	- Itâ€™s a task queue with focus on real-time processing, while also supporting task scheduling.
	- Django and Celery between contact we use Message_Broker.
	- Redis , RabbitMQ they are message_broker.
	
	command sequence:-
	- pip3 install Redis
		- redis-cli
	-	pip3 install celery
		-	celery -A Verilist worker -l INFO			//	Verilist replace your project-name
		- celery -A [project-name] worker --loglevel=info		//	Run for Periodic task in Verilist
	
- Celery Brokers:-
	- RabbitMQ
	- Redis
	- Amazon SQS
	- Zookeeper